'''
Simple class to take in a persistence diagram, as generated by ripser and
return this as a persistence image and optionally write this to file. We
are going to assume an n-dimensional list of persistence points where n = number
of homology classes (either one or two for point clouds)
'''

import os
import time
import numpy as np
import pickle as pk

from ripser import ripser
from persim import PersImage


class PersToPim():
    def __init__(self, input_path,
                       output_path = None,
                       input_type = "pickle",
                       filename = None,
                       specs=False,
                       spread=1,
                       pixels=[64, 64],
                       verbose=False):

        if filename == None:
            base = os.path.basename(input_path)
            filename = os.path.splitext(base)[0]

        diagrams = pk.load(input_path, "rb")

        pim = PersImage(specs=specs,
                        spread=spread,
                        pixels=pixels,
                        verbose=verbose)

        for i, diagram in enumerate(diagrams):
            # Update filename for each dimension
            filename = filename + "_H" + str(i) + ".pim"

            # Remove all infinite values, transform and dump
            diagram[i] = diagram[~np.isinf(diagram[i]).any(axis=1)]
            img = pim.transform(diagram[i])
            pk.dump(img, open(output_path + filename, "wb"))
