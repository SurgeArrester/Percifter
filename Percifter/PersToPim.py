'''
Simple class to take in a persistence diagram, as generated by ripser and
return this as a persistence image and optionally write this to file. We
are going to assume an n-dimensional list of persistence points where n = number
of homology classes (either one or two for point clouds)

Additional Pim generator for a collection of .pers files
'''

import os
import time
import numpy as np
import pickle as pk

from ripser import ripser
from persim import PersImage

def main():
    pers_folder = '/home/cameron/Datasets/ICSD/MineralClass/MineralPers/MineralPers/'
    pim_folder = '/home/cameron/Datasets/ICSD/MineralClass/MineralPers/MineralPim/'
    for icsd_code in os.listdir(pers_folder):
        for pers in os.listdir(pers_folder + icsd_code):
            pers_path = os.path.join(pers_folder, icsd_code, pers)
            # Generate image, write to file. Cap at 40 angstrom
            x = PersToPim(pers_path, output_path=pim_folder+icsd_code, specs={"minBD": 0, "maxBD": 40})
            print()



class PersToPim():
    def __init__(self, input_path,
                       output_path = None,
                       input_type = "pickle",
                       filename = None,
                       dim_split = False,
                       specs=False,
                       spread=1,
                       pixels=[64, 64],
                       verbose=False):

        if filename == None:
            base = os.path.basename(input_path)
            self.filename = os.path.splitext(base)[0]
        else:
            self.filename = filename

        diagrams = pk.load(open(input_path, "rb"))

        pim = PersImage(specs=specs,
                        spread=spread,
                        pixels=pixels,
                        verbose=verbose)

        # Remove all infinite values
        for i, diagram in enumerate(diagrams):
            diagrams[i] = diagram[~np.isinf(diagram).any(axis=1)]

        if dim_split:
            for i, diagram in enumerate(diagrams):
                # Update filename for each dimension
                self.filename = filename + "_dim_" + str(i) + ".pim"

                self.img = pim.transform(diagram[i])
                if output_path:
                    if not os.path.isdir(output_path):
                        os.makedirs(output_path)

                    pk.dump(self.img, open(output_path + self.filename, "wb"))

        else:
            self.filename = self.filename + ".pim"

            self.img = pim.transform(diagrams)
            if output_path:
                if not os.path.isdir(output_path):
                    os.makedirs(output_path)

                output_path = os.path.join(output_path, self.filename)
                pk.dump(self.img, open(output_path, "wb"))
                print()



if __name__ == "__main__":
    main()
